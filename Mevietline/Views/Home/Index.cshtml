@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor


@{
    ViewData["Title"] = "Chat";
    Layout = "~/Views/Shared/_Layout.cshtml";
    HttpContext httpContext = HttpContextAccessor.HttpContext;
    string userName = httpContext.Session.GetString("UserName");
    int userID = httpContext.Session.GetInt32("Id") ?? 0;
}

@{
    ViewData["Title"] = "Trang chủ";
}
<style>
    .active1 {
        border-bottom: 2px solid #000;
    }

    .chooseDt span {
        font-weight: 600;
        color: #000;
    }

        .chooseDt span:hover {
            background: #fff;
            color: #000;
            cursor: pointer;
            opacity: 0.7;
        }

    .chooseDtDemo span:hover {
        cursor: pointer;
        font-weight: 800;
    }

    .disabled {
        cursor: default;
        pointer-events: none;
        user-select: none;
    }

        .disabled:hover {
            cursor: default;
            pointer-events: none;
        }

    li {
        list-style-type: none;
    }

    .custom-file-upload {
        display: inline-block;
        position: relative;
        cursor: pointer;
        border: 1px solid #ccc;
        border-radius: 4px;
        padding: 6px 12px;
    }

        .custom-file-upload input[type="file"] {
            position: absolute;
            top: 0;
            left: 0;
            opacity: 0;
        }

        .custom-file-upload span {
            color: forestgreen;
            font-size: 16px;
        }

    .image-zoom {
        display: inline-block;
        position: relative;
        overflow: hidden;
    }

        .image-zoom img {
            transition: transform 0.3s;
        }

        .image-zoom:hover img {
            transform: scale(1.2);
        }
</style>

<div id="ThayAnh" >
    <div id="carouselExampleIndicators" class="carousel slide" data-bs-ride="carousel">
        <div class="carousel-indicators">
            <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"></button>
            <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="1" aria-label="Slide 2"></button>
            <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="2" aria-label="Slide 3"></button>
        </div>
        <div class="carousel-inner">
            <div class="carousel-item active">
                <img style="height: 20rem; object-fit: cover;" :src="anhSl1" class="d-block w-100" alt="...">
            </div>
            <div class="carousel-item">
                <img style="height: 20rem; object-fit: cover;" :src="anhSl2" class="d-block w-100" alt="...">
            </div>
            <div class="carousel-item">
                <img style="height: 20rem; object-fit: cover;" :src="anhSl3" class="d-block w-100" alt="...">
            </div>
        </div>
        <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Previous</span>
        </button>
        <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Next</span>
        </button>
    </div>

    <div class="container">
        <marquee onmouseover="this.stop()" onmouseout="this.start()" scrollamount="5">Thông báo: {{chayNgang}}</marquee>
    </div>
</div>
<div id="Vue_BangMain">

    <div class="bang-main container mt-3">
        <h4 class="text-center text-light text-uppercase">{{tieuDe}}</h4>
        <!-- Modal -->
        <div class="modal fade text-dark" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Mua vào</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div>
                            <div class="d-block">
                                <label class="form-label">Mã code mua </label>
                                <input class="form-control" type="text" readonly id="maCode" v-model="maCode" />
                            </div>
                            <div class="d-block">
                                <label class="form-label">Tên mua: </label>
                                <input class="form-control" type="text" readonly id="nguoiBan" v-model="nguoiBan" />
                            </div>

                            <div class="d-block">
                                <label class="form-label" for="quantity">Số lượng:</label>
                                <input class="form-control" type="number" id="quantity" v-model="quantity">
                            </div>

                            <div class="d-block">
                                <label class="form-label" for="price">Giá:</label>
                                <input class="form-control" type="hidden" id="GiaCa" v-model="GiaCa" readonly>
                                <input class="form-control" type="text" id="formattedGiaCa" v-model="formattedGiaCa" readonly>
                            </div>

                            <p class="m-0 pt-3">Tổng tiền: {{ formattedTotal }}</p>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                        <button type="button" class="btn btn-primary" v-on:click="getItem">Xác nhận</button>
                    </div>
                </div>
            </div>
        </div>
        <!-- Modal -->
        <div class="modal fade text-dark" id="BanModal" tabindex="-1" aria-labelledby="BanModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="BanModalLabel">Bán ra</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div>
                            <div class="d-block">
                                <label class="form-label">Mã code mua </label>
                                <input class="form-control" type="text" readonly id="maCode" v-model="maCode" />
                            </div>
                            <div class="d-block">
                                <label class="form-label">Tên mua</label>
                                <input class="form-control" type="text" readonly id="nguoiBan" v-model="nguoiBan" />
                            </div>

                            <div class="d-block">
                                <label class="form-label" for="quantity">Số lượng:</label>
                                <input class="form-control" type="number" id="quantity" v-model="quantity">
                            </div>

                            <div class="d-block">
                                <label class="form-label" for="price">Giá:</label>
                                <input class="form-control" type="hidden" id="GiaCa" v-model="GiaCa" readonly>
                                <input class="form-control" type="text" id="formattedGiaCa" v-model="formattedGiaCa" readonly>
                            </div>

                            <p class="m-0 pt-3">Tổng tiền: {{ formattedTotal }}</p>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                        <button type="button" class="btn btn-primary" v-on:click="getItemBan">Xác nhận</button>
                    </div>
                </div>
            </div>
        </div>
        <span style="color:#FF6600">
            Số dư: {{ new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(tienDangCo) }} |
        </span>
        <span style="color:#FF6600">
            Sản phẩm: {{ SoDiemCo }} điểm
        </span>
        <br />

        <table id="GetData" class="table table-bordered text-center text-light" style="border: 1px solid #fff !important;">
            <thead>
                <tr>
                    <th>{{thead1}}</th>
                    <th>{{thead2}}</th>
                    <th>{{thead3}}</th>
                    <th>{{thead4}}</th>
                </tr>
            </thead>
            <tbody v-for="(item, index) in DataUser">
                <tr :key="item.id">
                    <td>{{item.maCode}}</td>
                    <td class="text-warning">{{ item.nguoiBan}}</td>
                    <td v-bind:class="getPriceClass(item.giaCa, DataUser[index-1]?.giaCa)">
                        {{ new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(item.giaCa) }}
                    </td>
                    <td>
                        <button class="btn btn-success btn-muaban" type="button" data-bs-toggle="modal" data-bs-target="#exampleModal" v-on:click=" getIdBang(item.id)">Mua</button> |
                        <button class=" btn btn-danger btn-muaban" type="button" data-bs-toggle="modal" data-bs-target="#BanModal" v-on:click=" getIdBangBan(item.id)">Bán</button>

                    </td>

                </tr>
            </tbody>
        </table>
        <div class="mt-4 row text-danger">
            <h3 class="">Lưu ý:</h3>
            <div class="col-12 col-md-12 col-sm-12 col-xl-12">
                <p>{{LuuY}}</p>
            </div>
        </div>


    </div>

</div>

<div class="iconChat ">
    <input type="checkbox"
           id="check" />
    <label class="chat-btn"
           for="check">
        <i class="fa-regular fa-comment-dots comment"></i>
        <i class="fa-solid fa-xmark close"></i>
    </label>
    <form class="wrapper">
        <div class="header"><h6>Tổng đài-CSKH</h6></div>
        <ul id="messagesList" style="height:200px; overflow: auto; color: black;"></ul>

        <div class="chat-form">
            <input class="form-control" id="messageInput" placeholder="Tin nhắn">
            <label class="custom-file-upload">
                <input type="file" style="width:100%" id="img_send" accept="image/png,image/jpeg,image/jpg" />
                <span>Tải lên</span>
            </label>
            <input type="submit" id="sendButton" value="Gửi" class="btn btn-success float-end mb-2 mt-2">
        </div>
    </form>
</div>

<script src="~/js/bangmain_vuejs/bangmain_crud.js"></script>
<script src="~/js/bangmain_vuejs/thayanh.js"></script>

<script src="~/lib/signalr/dist/browser/signalr.js"></script>
<script>
    "use strict";
    var currentUser = "";

    var connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").build();
    //Disable send button until connection is established
    document.getElementById("sendButton").disabled = true;
    //khởi động kết nối
    try {
        connection.start().then(function () {
            document.getElementById("sendButton").disabled = false;
            // lấy lịch sử chát với người dùng
            let user = "@Html.Raw(userName)";
            console.log("lấy từ session:",user);
            if (user != "") {
                connection.invoke("HistoryChat", user).catch(function (err) {
                    console.error(err.toString());
                });
            }
        }).catch(function (err) {
            return console.error("Lỗi connected by Huy: ", err.toString());
        });
    } catch (err) {
        console.log(err)
    };
    connection.on("ReceiveMessage", function (user, message, userid) {
        if (user == `@Html.Raw(userName)`) {
            var li = document.createElement("li");
            document.getElementById("messagesList").appendChild(li);
            li.innerHTML = `
                        <div class="d-flex flex-row justify-content-end mb-4">
                                      <img src="/user.png"
                                alt="avatar 1" style="width: 45px; height: 100%;">
                              <div class="p-3 ms-3" style="border-radius: 15px; background-color: rgba(57, 192, 237,.2);">
                                        <p class="small mb-0">${message}</p>
                              </div>
                            </div>
                    `
        }
        document.getElementById("messagesList").scrollTop = document.getElementById("messagesList").scrollHeight;
        $('#preloader').fadeOut();


    });

    connection.on("ReceiveMessageAdmin", function (user, message) {
        if (user == `@Html.Raw(userName)`) {
            var li = document.createElement("li");
            li.innerHTML = `
                        <div class="d-flex flex-row justify-content-start mb-4">
                                              <img src="/adminaa.jpg"
                                    alt="avatar 1" style="width: 45px; height: 100%;">
                                  <div class="p-3 ms-3" style="border-radius: 15px; background-color: rgba(57, 192, 237,.2);">
                                            <p class="small mb-0">${message}</p>
                                  </div>
                                </div>
                    `;
            document.getElementById("messagesList").appendChild(li);
        }
        document.getElementById("messagesList").scrollTop = document.getElementById("messagesList").scrollHeight;
        $('#preloader').fadeOut();



    });

    connection.on("ReceiveMessageHistory", function (user, history) {
        currentUser = user;
        var userId = `@Html.Raw(userID)`;

        if (user == `@Html.Raw(userName)`) {
            var html = history.map(item => {
                return item.fromUser == userId ? `
                                <li>
                                        <div class="d-flex flex-row justify-content-end mb-4">
                              <img src="/user.png"
                            alt="avatar 1" style="width: 45px; height: 100%;">
                          <div class="p-3 ms-3" style="border-radius: 15px; background-color: rgba(57, 192, 237,.2);">
                                <p class="small mb-0">${item.content}</p>
                          </div>
                        </div>
                                </li>
                            ` : `
                                    <li>
                                            <div class="d-flex flex-row justify-content-start mb-4">
                                          <img src="/adminaa.jpg"
                                alt="avatar 1" style="width: 45px; height: 100%;">
                              <div class="p-3 ms-3" style="border-radius: 15px; background-color: rgba(57, 192, 237,.2);">
                                    <p class="small mb-0">${item.content}</p>
                              </div>
                            </div>
                                    </li>
                            `;
            }).join("");

            document.getElementById("messagesList").innerHTML = html;
        }
        document.getElementById("messagesList").scrollTop = document.getElementById("messagesList").scrollHeight
    });

    document.getElementById("sendButton").addEventListener("click", function (event) {
        var user = `@Html.Raw(userName)`;
        var message = document.getElementById("messageInput").value;
        if (!(!message.trim())) {
            connection.invoke("SendMessage", user, message).then(data => {
                document.getElementById("messageInput").value = '';
                return data;
            }).catch(function (err) {
                return console.error(err.toString());
            });
        }
        event.preventDefault();


    });
    connection.onclose(function (error) {
        console.log('Connection closed due to error: ' + error);
        connection.start().then(function () {
            console.log('reconnected');
        }).catch(function (error) {
            console.error(error);
        });

    });
    // hàm sử lý file ảnh
    function compressImage(file) {
        const maxSize = 4320;
        const outputType = "image/jpeg";
        return new Promise((resolve, reject) => {
            let reader = new FileReader();
            reader.readAsDataURL(file);
            reader.onload = (event) => {
                let img = new Image();
                img.src = event.target.result;
                img.onload = () => {
                    let canvas = document.createElement("canvas");
                    let ctx = canvas.getContext("2d");


                    let newWidth = img.width;
                    let newHeight = img.height;
                    if (newWidth > maxSize || newHeight > maxSize) {
                        let scale = Math.min(maxSize / newWidth, maxSize / newHeight);
                        newWidth *= scale;
                        newHeight *= scale;
                    }


                    canvas.width = newWidth;
                    canvas.height = newHeight;


                    ctx.drawImage(img, 0, 0, newWidth, newHeight);


                    let outputDataUrl = canvas.toDataURL(outputType);


                    resolve(outputDataUrl);
                };
                img.onerror = reject;
            };
            reader.onerror = reject;
        });
    }

    // Sử dụng hàm giảm dung lượng ảnh
    let fileInput = document.getElementById("img_send");
    fileInput.addEventListener("change", async () => {
        let file = fileInput.files[0];
        if (file.size > 3840 * 2440) {
            alert("ảnh giới hạn dưới 10MB");
            return;
        }
        let compressedDataUrl = await compressImage(file);
        let message = `
                      <img src="${compressedDataUrl}" onclick="openImage('${compressedDataUrl}')" style="width: 80px; height: auto;" />
                `;
        $('#preloader').fadeIn();

        connection.invoke("SendMessage", currentUser, message.trim()).then(data => { document.getElementById("img_send").value = ""; return data })
            .catch(function (err) {
                return console.error(err.toString());
            });
        console.log(compressedDataUrl);
    });

    function openImage(base64) {
        const byteString = atob(base64.split(',')[1]);
        const mimeString = base64.split(',')[0].split(':')[1].split(';')[0];
        const ab = new ArrayBuffer(byteString.length);
        const ia = new Uint8Array(ab);
        for (let i = 0; i < byteString.length; i++) {
            ia[i] = byteString.charCodeAt(i);
        }
        const blob = new Blob([ab], { type: mimeString });
        const url = URL.createObjectURL(blob);
        window.open(url, '_blank');
    }
</script>